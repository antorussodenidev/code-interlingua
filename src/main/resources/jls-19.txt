// This grammar is extracted from the "Java Language Specification"
// Chapter 19 which gathers together the grammar productions from
// the rest of the spec.
// https://docs.oracle.com/javase/specs/jls/se8/html/jls-19.html

// Section 2.4 of the JLS defines the syntax.
// The fixed-width sections are quoted, and "one of" productions are
// expanded to one per line.

// This grammar is examined by generate_parser_helpers.py to
// produce *ParSerHelper.java classes which are references in
// NodeType classes.
// If there is one in the source tree,
// or the production starts with "TODO" then no
// helper is generated.


/*

DERIVATION
==========
I produced the bulk of this file thus:

curl https://docs.oracle.com/javase/specs/jls/se8/html/jls-19.html \
    > /tmp/jls-19.html

And then adding the following to the bottom before the </body>,
loading it in a browser and copy/pasting the text form.

<pre id="text-grammar"></pre>
<script>
  function strip(s) {
    return String(s).replace(/^\s+|\s+$/g, '');
  }

  var specialProds = {
    Identifier: 'builtin',  // Lexical production
    IdentifierChars: 'builtin',
    JavaLetter: null,  // Not needed post-lex
    JavaLetterOrDigit: null,
    IntegerLiteral: 'builtin',
    FloatingPointLiteral: 'builtin',
    StringLiteral: 'builtin',
    CharacterLiteral: 'builtin',
  };

  var output = '';
  var prods = document.querySelectorAll('.production');
  var seen = {};
  for (var i = 0, n = prods.length; i !== n; ++i) {
    var prod = prods[i];
    var lhs  = prod.querySelector('.lhs');
    var rhs  = prod.querySelector('.rhs');
    var name = strip(lhs.textContent);
    var variant = [];
    var variants = [];
    function processRhs(rhsNodes) {
      for (var i = 0, n = rhsNodes.length; i !== n; ++i) {
        var rhsNode = rhsNodes[i];
        switch (rhsNode.nodeType) {
          case Node.TEXT_NODE:
            var text = strip(rhsNode.nodeValue);
            var parts = rhsNode.nodeValue.match(/\S+/g);
            if (parts) {
              for (var j = 0, m = parts.length; j !== m; ++j) {
                variant.push(parts[j]);
              }
            }
            break;
          case Node.ELEMENT_NODE:
            switch (rhsNode.tagName) {
              case 'BR':
                if (variant.length) {
                  variants.push(variant.join(' '));
                  variant.length = 0;
                }
                break;
              case 'A':  // Reference to production
                variant.push(strip(rhsNode.textContent));
                break;
              case 'SPAN':
                variant.push('/' + '*' + strip(rhsNode.textContent) + '*' + '/');
                break;
              case 'CODE':  // Literal.  Quoted strings in lexical grammar not here.
                variant.push('"' + strip(rhsNode.textContent) + '"');
                break;
              case 'PRE':
                processRhs(rhsNode.childNodes);
                break;
              default:
                throw new Error(rhs.tagName + ' not expected');
            }
            break;
        }
      }
    }
    processRhs(rhs.childNodes);
    if (variant.length) { variants.push(variant.join(' ')); }
    var variantBreak = '\n     ';
    var variantsOutput = variants.join(variantBreak);
    var noOneOf = variantsOutput.replace(/^\s*\(one of\)(?:\s*)/, '');
    if (noOneOf != variantsOutput) {
      variantsOutput = noOneOf.replace(/\s+/g, variantBreak);
    }
    // Handle lexical productions by mapping them to "builtin".
    var prodName = lhs.textContent.replace(/:$/, '');
    seen[prodName] = true;
    if (Object.hasOwnProperty.call(specialProds, prodName)) {
      var specialRhs = specialProds[prodName];
      if (specialRhs) {
        variantsOutput = specialRhs;
      } else {
        continue;
      }
    }

    // HACK: Include lexical productions so that every non-terminal on
    // a RHS appears in a LHS.
    if ('Literal' == prodName) {
      for (var specialName in specialProds) {
        if (Object.hasOwnProperty.call(specialProds, specialName)
            && !seen[specialName] && specialProds[specialName]) {
          output += specialName + ':'
              + variantBreak + specialProds[specialName] + '\n';
        }
      }
    }

    // Output the rule.
    output += prodName + ':' + variantBreak + variantsOutput + '\n';
  }
  document.querySelector('#text-grammar').appendChild(document.createTextNode(output));
</script>


CHANGES
=======
The expression grammar has been rewritten to make it PEG-compatible and
statement productions have been re-ordered for the same reason.

Name productions have been reworked because, in a context-free parse,
    foo
can be multiple of variable name, field name, interface type, class type,
type variable in many positions.


GRAMMAR SYNTAX
==============
The syntactic conventions are similar to those defined in JLS Chapter 2, but
instead of using a fixed-width font for literal tokens, double quotes are used.
The "one of ..." syntactic sugar is not used and there is a negative lookahead
explained below.

Productions are defined thus
```
NonTerminal:
    Variant1
    Variant2
```

where variants are on separate lines and are indented.
A variant is a sequence of
```
    [OptionalContent]
    {RepeatedContent}
    "LiteralToken"
    NonTerminalReference
    !NegativeLookahead
    !!PositiveLookahead
```

A variant's body can be followed by annotations
```
    variant1 (@name=Name)
    variant2 @anon
```

as can a production's name thus
```
NonTerminal: (@name=Name) @anon
```

(@name=Name) specifies an explicit name for the variant.
If not specified, the variant name is derived from the body tokens.

@anon specifies that no push/pop events are added to the output when
parsing using the variant.  This makes for much more manageable
expression sub-trees since every precedence layer does not introduce
an inner node.  Instead of the input "1" parsing as
   Expression.AssignemntExpression
   |
   +--AssignmentExpression.ConditionalExpression
      |
      +--ConditionalExpression.ConditionalOrExpression
         |
         +--ConditionalOrExpression.ConditionalAndExpression
            |
            +--ConditionalAndExpression.InclusiveOrExpression
               |
               +--...
                  |
                  +--Primary
                     |
                     +--Literal
                        |
                        +--IntLiteral
                          |
                           +--"1"

judicious use of @anon cuts out all the *Expression.*Expression variant
inner nodes which must have exactly one child which is itself a *Expression
inner node.

@ignorable means the content matched are ignorable comment or whitespace tokens.

@nonstandard means that the content matched is not part of the java language, and
is an extension only used when a special flag is supplied to the parser.

(@postcond=Ident) means that parsing should only pass if the named member of
the Postconditions class passes when given the ParseState after the body is
parsed.

@nointerp means the production should not be allowed to contain template
interpolations when parsed in non-standard mode without an explicit type hint.

(@mixin=Ident,Ident,...) attached to a production means that the corresponding
*Node class implements that mixin which might involve creating storage to back
the mixin's setters&getters.

@intermediate variants are those that can be manufactured when interpolating into
an AST.  @intermediate variants have exactly one non-terminal.
If a variant consists only of lookaheads and one non-terminal then it is
implicitly @intermediate.

*/


// Lexical Structure
(chapter=Literal)
Identifier: (@mixin=NamePart)
     builtin // IdentifierChars but not a Keyword or BooleanLiteral or NullLiteral
IdentifierChars:
     builtin // JavaLetter {JavaLetterOrDigit}
IntegerLiteral: (@mixin=Typed)
     builtin
FloatingPointLiteral: (@mixin=Typed)
     builtin
BooleanLiteral: (@mixin=Typed)
     "false"
     "true"
CharacterLiteral: (@mixin=Typed)
     builtin
StringLiteral: (@mixin=Typed)
     builtin
NullLiteral: (@mixin=Typed)
     "null"
JavaDocComment: @nointerp
     builtin @ignorable
//JavaLetter:
//     any Unicode character that is a "Java letter"
//JavaLetterOrDigit:
//     any Unicode character that is a "Java letter-or-digit"
Literal:
     FloatingPointLiteral
     IntegerLiteral
     BooleanLiteral
     CharacterLiteral
     StringLiteral
     NullLiteral

// 4. Types, Values, and Variables
(chapter=Type)
Type:
     ReferenceType
     PrimitiveType
PrimitiveType: (@mixin=WholeType)
     {Annotation} NumericType
     {Annotation} "boolean"
NumericType: (@mixin=WholeType)
     IntegralType
     FloatingPointType
IntegralType:
     "byte"
     "short"
     "int"
     "long"
     "char"
FloatingPointType:
     "float"
     "double"
ReferenceType: (@mixin=WholeType)
     ArrayType
     ClassOrInterfaceType
     TypeVariable
ClassOrInterfaceType: (@mixin=TypeReference,WholeType)
     // This turns the original grammar on its head because in JLS chapter 19,
     // ClassOrInterfaceType:
     //    ClassType
     //    InterfaceType
     // The JLS defines a whole suite of type names:
     //   ClassOrInterfaceType, ClassType, InterfaceType,
     //   ClassOrInterfaceTypeToInstantiate, Unann*.
     // The Java reflective libraries represent all of these via java.lang.Class
     // with a bit field of modifiers, so we use a single production
     // and associate modifier metadata with it when we know enough to distinguish
     // interfaces from normal classes.
     ContextFreeNames
     [ClassOrInterfaceType "."] {Annotation} Identifier [TypeArguments]
ClassType: (@mixin=WholeType)
     ClassOrInterfaceType
InterfaceType: (@mixin=WholeType)
     ClassOrInterfaceType
TypeVariable: (@mixin=TypeReference)
     {Annotation} Identifier
ArrayType: (@mixin=WholeType)
     Type {Annotation} Dim
// This Dim production does not appear in the grammar, but including it here
// means that the presence of optional or repeated "[]" pairs results in an
// AST node.
Dim: @nointerp
     "[" "]"
Dims: @nointerp
     {Annotation} Dim {{Annotation} Dim}
TypeParameter: (@mixin=TypeDeclaration)
     {!!TypeParameterModifier Modifier} SimpleTypeName [TypeBound] (@name=TypeParameter)
TypeParameterModifier:
     Annotation
TypeBound:
     "extends" ClassOrInterfaceType {AdditionalBound}
     "extends" TypeVariable
AdditionalBound: @nointerp
     "&" InterfaceType
TypeArguments: @nointerp
     "<" TypeArgumentList ">"
TypeArgumentList:
     TypeArgument {"," TypeArgument}
TypeArgument:
     ReferenceType
     Wildcard
Wildcard:
     {Annotation} "?" [WildcardBounds]
WildcardBounds:
     "extends" ReferenceType
     "super" ReferenceType
// Actually defined under classes in JLS 19.
// I rewrote them to delegate with a lookahead.
// That way we don't have largely duplicative
// node types for the annotatable and unannotated equivalents.
UnannType: (@mixin=WholeType)
     !"@" Type
Result: (@mixin=WholeType)
     "void"
     UnannType


// Names
(chapter=Name)
FieldName: (@mixin=ExpressionNameReference)
     Identifier
EnumConstantName:
     FieldName
Label:
     Identifier
LocalName: (@mixin=ExpressionNameReference)
     Identifier
MethodName: (@mixin=ExpressionNameReference,MethodDescriptorReference)
     Identifier
SimpleTypeName:
     Identifier
TypeName: (@mixin=TypeReference)
     !"@" ContextFreeNames
     PackageOrTypeName "." Identifier
     Identifier
PackageOrTypeName:
     !"@" ContextFreeNames
     PackageOrTypeName "." Identifier
     Identifier
// The JLS defines ExpressionName and AmbiguousName, but we use
// the more general ContextFreeNames instead.
//ExpressionName:
//     !"@" ContextFreeNames
//     AmbiguousName "." Identifier
//     Identifier
//AmbiguousName:
//     !"@" ContextFreeNames
//     AmbiguousName "." Identifier
//     Identifier
PackageName:
     Identifier {"." Identifier}

// ContextFreeNames matches a series of dotted names, possibly with
// annotations and/or type parameters.
// There are a number of productions like ClassType, InterfaceType, TypeVariable
// which are lexically ambiguous, so we order productions so that a parse
// reached ContextFreeNames first which allows a later pass to take into
// account scoping and declarations to disambiguate dotted identifier soup
// into approriate sub-trees.
// It is frequently the case also that a dotted name appears to the left of
// some variation of ("." [Stuff] Identifier).  This makes it easy for the
// parser to greedily match names and then borrow however many are necessary
// for the right.
ContextFreeNames:
      ContextFreeName {"." ContextFreeName}
ContextFreeName:
      {Annotation} Identifier [TypeArgumentsOrDiamond] (@name=Name)


// Packages
(chapter=Package)
CompilationUnit: (@mixin=FileNode) @toplevel
     [PackageDeclaration] {ImportDeclaration} {TypeDeclaration}
PackageDeclaration:
     // TODO: Why is the package name here not left-associative as it is under the names chapter?
     {!!PackageModifier Modifier} "package" PackageName ";" (@name=Declaration)
PackageModifier:
     Annotation
ImportDeclaration:
     SingleTypeImportDeclaration
     TypeImportOnDemandDeclaration
     SingleStaticImportDeclaration
     StaticImportOnDemandDeclaration
SingleTypeImportDeclaration:
     "import" TypeName ";"
TypeImportOnDemandDeclaration:
     "import" PackageOrTypeName "." "*" ";"
SingleStaticImportDeclaration:
     "import" "static" TypeName "." Identifier ";"
StaticImportOnDemandDeclaration:
     "import" "static" TypeName "." "*" ";"
TypeDeclaration:
     ClassDeclaration
     InterfaceDeclaration
     ";"

// Classes
(chapter=Class)
ClassDeclaration:
     NormalClassDeclaration
     EnumDeclaration
NormalClassDeclaration: (@mixin=TypeDeclaration,TypeParameterScope)
     [JavaDocComment] {!!ClassModifier Modifier} "class" SimpleTypeName [TypeParameters] [Superclass] [Superinterfaces] ClassBody (@name=Declaration)
ClassModifier:
     Annotation
     "public"
     "protected"
     "private"
     "abstract"
     "static"
     "final"
     "strictfp"
TypeParameters:
     "<" TypeParameterList ">"
TypeParameterList:
     TypeParameter {"," TypeParameter}
Superclass:
     "extends" ClassType
Superinterfaces:
     "implements" InterfaceTypeList
InterfaceTypeList:
     InterfaceType {"," InterfaceType}
ClassBody: (@mixin=TypeScope,ExpressionNameScope)
     "{" {ClassBodyDeclaration} "}"
ClassBodyDeclaration:
     ClassMemberDeclaration
     InstanceInitializer
     StaticInitializer
     ConstructorDeclaration
ClassMemberDeclaration:
     FieldDeclaration
     MethodDeclaration
     ClassDeclaration
     InterfaceDeclaration
     ";"
// TODO: Is this really a member declaration?  If there are multiple variable
// declarators then there are multiple declarations here.
// We could solve this by iterating out field declarations to have one
// variable declarator per declaration.
FieldDeclaration: (@mixin=MemberDeclaration)
     [JavaDocComment] {!!FieldModifier Modifier} UnannType VariableDeclaratorList ";" (@name=Declaration)
FieldModifier:
     Annotation
     "public"
     "protected"
     "private"
     "static"
     "final"
     "transient"
     "volatile"
VariableDeclaratorList:
     VariableDeclarator {"," VariableDeclarator}
VariableDeclarator:
     VariableDeclaratorId ["=" VariableInitializer]
VariableDeclaratorId: (@mixin=ExpressionNameDeclaration)
     Identifier [Dims]
VariableInitializer:
     Expression
     ArrayInitializer
MethodDeclaration: (@mixin=TypeParameterScope,CallableDeclaration)
     [JavaDocComment] {!!MethodModifier Modifier} MethodHeader MethodBody (@name=Declaration)
MethodModifier:
     Annotation
     "public"
     "protected"
     "private"
     "abstract"
     "static"
     "final"
     "synchronized"
     "native"
     "strictfp"
MethodHeader:
     [TypeParameters {Annotation}] Result MethodDeclarator [Throws]
MethodDeclarator:
     MethodName "(" [FormalParameterList] ")" [Dims]
FormalParameterList:
     FormalParameters ["," LastFormalParameter]
     LastFormalParameter
FormalParameters:
     FormalParameter {"," FormalParameter}
     ReceiverParameter {"," FormalParameter}
FormalParameter: (@mixin=LocalDeclaration)
     {!!VariableModifier Modifier} UnannType VariableDeclaratorId (@name=Declaration)
VariableModifier:
     Annotation
     "final"
LastFormalParameter: (@mixin=LocalDeclaration)
     {!!VariableModifier Modifier} UnannType {Annotation} "..." VariableDeclaratorId  (@name=Variadic)
     FormalParameter @anon
ReceiverParameter:
     {Annotation} UnannType [SimpleTypeName "."] "this"
Throws:
     "throws" ExceptionTypeList
ExceptionTypeList:
     ExceptionType {"," ExceptionType}
ExceptionType:
     ClassType
     TypeVariable
MethodBody:
     Block
     ";"
InstanceInitializer: (@mixin=CallableDeclaration)
     Block
StaticInitializer: (@mixin=CallableDeclaration)
     "static" Block
ConstructorDeclaration: (@mixin=TypeParameterScope,CallableDeclaration)
     [JavaDocComment] {!!ConstructorModifier Modifier} ConstructorDeclarator [Throws] ConstructorBody (@name=Declaration)
ConstructorModifier:
     Annotation
     "public"
     "protected"
     "private"
ConstructorDeclarator:
     [TypeParameters] SimpleTypeName "(" [FormalParameterList] ")"
ConstructorBody:
     "{" [ExplicitConstructorInvocation] [BlockStatements] "}"
// TODO: Resolve constructor descriptor reference for explicit constructor
// invocations.
ExplicitConstructorInvocation:
     [TypeArguments] "this" "(" [ArgumentList] ")" ";"
     [TypeArguments] "super" "(" [ArgumentList] ")" ";"
     Primary "." [TypeArguments] "super" "(" [ArgumentList] ")" ";"
EnumDeclaration: (@mixin=TypeDeclaration)
     [JavaDocComment] {!!ClassModifier Modifier} "enum" SimpleTypeName [Superinterfaces] EnumBody (@name=Declaration)
EnumBody: (@mixin=TypeScope,ExpressionNameScope)
     "{" [EnumConstantList] [","] [EnumBodyDeclarations] "}"
EnumConstantList:
     EnumConstant {"," EnumConstant}
EnumConstant: (@mixin=TypeDeclaration,ExpressionNameDeclaration)
     {!!EnumConstantModifier Modifier} EnumConstantName ["(" [ArgumentList] ")"] [ClassBody] (@name=Declaration)
EnumConstantModifier:
     Annotation
EnumBodyDeclarations: (@mixin=TypeScope)
     ";" {ClassBodyDeclaration}

// Interfaces
(chapter=Interface)
InterfaceDeclaration:
     NormalInterfaceDeclaration
     AnnotationTypeDeclaration
NormalInterfaceDeclaration: (@mixin=TypeDeclaration,TypeParameterScope)
     [JavaDocComment] {!!InterfaceModifier Modifier} "interface" SimpleTypeName [TypeParameters] [ExtendsInterfaces] InterfaceBody (@name=Declaration)
InterfaceModifier:
     Annotation
     "public"
     "protected"
     "private"
     "abstract"
     "static"
     "strictfp"
ExtendsInterfaces:
     "extends" InterfaceTypeList
InterfaceBody: (@mixin=TypeScope,ExpressionNameScope)
     "{" {InterfaceMemberDeclaration} "}"
InterfaceMemberDeclaration:
     ConstantDeclaration
     InterfaceMethodDeclaration
     ClassDeclaration
     InterfaceDeclaration
     ";"
ConstantDeclaration: (@mixin=MemberDeclaration)
     [JavaDocComment] {!!ConstantModifier Modifier} UnannType VariableDeclaratorList ";" (@name=Declaration)
ConstantModifier:
     Annotation
     "public"
     "static"
     "final"
InterfaceMethodDeclaration: (@mixin=TypeParameterScope,CallableDeclaration)
     [JavaDocComment] {!!InterfaceMethodModifier Modifier} MethodHeader MethodBody (@name=Declaration)
InterfaceMethodModifier:
     Annotation
     "public"
     "abstract"
     "default"
     "static"
     "strictfp"
AnnotationTypeDeclaration: (@mixin=TypeDeclaration)
     [JavaDocComment] {!!InterfaceModifier Modifier} "@" "interface" SimpleTypeName AnnotationTypeBody (@name=Declaration)
AnnotationTypeBody: (@mixin=TypeScope)
     "{" {AnnotationTypeMemberDeclaration} "}"
AnnotationTypeMemberDeclaration:
     AnnotationTypeElementDeclaration
     ConstantDeclaration
     ClassDeclaration
     InterfaceDeclaration
     ";"
AnnotationTypeElementDeclaration: (@mixin=MemberDeclaration)
     [JavaDocComment] {!!AnnotationTypeElementModifier Modifier} UnannType MethodName "(" ")" [Dims] [DefaultValue] ";" (@name=Declaration)
AnnotationTypeElementModifier:
     Annotation
     "public"
     "abstract"
DefaultValue:
     "default" ElementValue
Annotation: @nointerp
     NormalAnnotation
     SingleElementAnnotation
     MarkerAnnotation
Modifier: @nointerp
     "abstract"
     "default"
     "final"
     "native"
     "private"
     "protected"
     "public"
     "static"
     "strictfp"
     "synchronized"
     "transient"
     "volatile"
     Annotation
NormalAnnotation: @nointerp
     "@" TypeName "(" [ElementValuePairList] ")"
ElementValuePairList:
     ElementValuePair {"," ElementValuePair}
ElementValuePair:
     Identifier "=" ElementValue
ElementValue:
     ConditionalExpression
     ElementValueArrayInitializer
     Annotation
ElementValueArrayInitializer:
     "{" [ElementValueList] [","] "}"
ElementValueList:
     ElementValue {"," ElementValue}
MarkerAnnotation: @nointerp
     "@" TypeName
SingleElementAnnotation: @nointerp
     "@" TypeName "(" ElementValue ")"

// Arrays
(chapter=Array)
ArrayInitializer: (@mixin=Typed)
     "{" [VariableInitializerList] [","] "}"
VariableInitializerList:
     VariableInitializer {"," VariableInitializer}

// Blocks and Statements
(chapter=Statement)
Block: (@mixin=ExpressionNameScope)
     "{" [BlockStatements] "}"
BlockStatements:
     // The JLS grammar originally was defined simply
     //     BlockStatement {BlockStatement}
     // and included ClassDeclaration among BlockStatement.
     //
     // Class declarations in blocks cannot be forward referenced, so in
     //   static class C {}
     //   static {
     //     C x;  // The type C refers to the class C defined outside the block.
     //     class C {}
     //     C y;  // The rype C refers to the class C defined within the block.
     //   }
     // x and y have different types.
     //
     // Adding BlockTypeScope lets us maintain the invariant that each type
     // defined in a TypeScope is visible to all type references in the scope
     BlockStatement {BlockStatement} [BlockTypeScope]
     BlockTypeScope
BlockTypeScope: (@mixin=TypeScope)
     ClassDeclaration [BlockStatements]
BlockStatement: (@mixin=LimitedScopeElement)
     LocalVariableDeclarationStatement
     Statement
LocalVariableDeclarationStatement:
     LocalVariableDeclaration ";"
LocalVariableDeclaration: (@mixin=LocalDeclaration)
     {!!VariableModifier Modifier} UnannType VariableDeclaratorList (@name=Declaration)
Statement:
     Block
     EmptyStatement
     ExpressionStatement
     AssertStatement
     SwitchStatement
     DoStatement
     BreakStatement
     ContinueStatement
     ReturnStatement
     SynchronizedStatement
     ThrowStatement
     TryStatement
     LabeledStatement
     IfStatement
     WhileStatement
     ForStatement
EmptyStatement:
     ";"
LabeledStatement:
     Label ":" Statement
ExpressionStatement:
     StatementExpression ";" @intermediate
StatementExpression:
     Assignment
     PreExpression
     PostExpression
     MethodInvocation
     ClassInstanceCreationExpression
IfStatement:
     "if" "(" Expression ")" Statement "else" Statement
     "if" "(" Expression ")" Statement !"else"
AssertStatement:
     "assert" Expression [":" Expression] ";"
SwitchStatement:
     "switch" "(" Expression ")" SwitchBlock
SwitchBlock: (@mixin=ExpressionNameScope)
     "{" {SwitchBlockStatementGroup} "}"
SwitchBlockStatementGroup:
     SwitchLabels [BlockStatements]
SwitchLabels:
     SwitchLabel {SwitchLabel}
SwitchLabel: @nointerp
     "case" CaseValue ":"
     "default" ":"
CaseValue: (@mixin=Typed)
     Identifier !!":" (@name=Ambiguous)  // Foo could be a constant reference or an enum name
     EnumConstantName !!":"
     ConstantExpression
WhileStatement:
     "while" "(" Expression ")" Statement
DoStatement:
     "do" Statement "while" "(" Expression ")" ";"
ForStatement:
     BasicForStatement
     EnhancedForStatement
BasicForStatement:
     "for" "(" [ForInit] ";" [Expression] ";" [ForUpdate] ")" Statement
ForInit:
     StatementExpressionList
     LocalVariableDeclaration
ForUpdate:
     StatementExpressionList
StatementExpressionList:
     StatementExpression {"," StatementExpression}
EnhancedForStatement: (@mixin=LocalDeclaration)
     "for" "(" {!!VariableModifier Modifier} UnannType VariableDeclaratorId ":" Expression ")" Statement (@name=EnhancedForStatement)
BreakStatement:
     "break" [Label] ";"
ContinueStatement:
     "continue" [Label] ";"
ReturnStatement:
     "return" [Expression] ";"
ThrowStatement:
     "throw" Expression ";"
SynchronizedStatement:
     "synchronized" "(" Expression ")" Block
TryStatement:
     "try" Block [Catches] Finally
     "try" Block Catches
     TryWithResourcesStatement
Catches:
     CatchClause {CatchClause}
CatchClause:
     "catch" "(" CatchFormalParameter ")" Block
CatchFormalParameter: (@mixin=LocalDeclaration)
     {!!VariableModifier Modifier} CatchType VariableDeclaratorId (@name=CatchFormalParameter)
CatchType:
     ClassType {"|" ClassType}
Finally:
     "finally" Block
TryWithResourcesStatement:
     "try" ResourceSpecification Block [Catches] [Finally]
ResourceSpecification:
     "(" ResourceList [";"] ")"
ResourceList:
     Resource {";" Resource}
Resource: (@mixin=LocalDeclaration)
     {!!VariableModifier Modifier} UnannType VariableDeclaratorId "=" Expression (@name=Resource)

// Expressions
(chapter=Expression)
ExpressionAtom: (@mixin=Typed)
     UnqualifiedClassInstanceCreationExpression
     ArrayCreationExpression
     Literal
     ClassLiteral
     [TypeName "."] "this" (@name=This)
     [TypeName "."] "super" !"[" !!UsePrefix  (@name=Super)
     ClassType "::" [TypeArguments] "new"  (@name=ConstructorReference)
     ArrayType "::" "new"  (@name=ArrayConstructorReference)
     MethodName "(" [ArgumentList] ")" (@name=MethodInvocation)
     LocalName (@name=Local)
     FieldName (@name=FreeField)
     TypeName !!"."  (@name=StaticMember)
     ReferenceType !!"::"  (@name=StaticReference)
     !CastExpression "(" Expression ")"  (@name=Parenthesized) @intermediate
     QuotedName
Primary: (@mixin=Typed)
     Primary "." [TypeArguments] MethodName "(" [ArgumentList] ")"  (@name=MethodInvocation)
     Primary "::" [TypeArguments] MethodName  (@name=MethodReference)
     Primary "." UnqualifiedClassInstanceCreationExpression  (@name=InnerClassCreation)
     Primary "[" Expression "]"  (@name=ArrayAccess)
     !SimpleCallPrefix ContextFreeNames !DotKeywordDimsOrCtorRef (@name=Ambiguous)
     Primary "." FieldName  (@name=FieldAccess)
     ExpressionAtom @anon
LeftHandSide:
     Primary (@postcond=Primary.FieldAccess)              (@name=FieldAccess)
     Primary (@postcond=Primary.ArrayAccess)              (@name=ArrayAccess)
     Primary (@postcond=Primary.ExpressionAtom.Local)     (@name=Local)
     Primary (@postcond=Primary.ExpressionAtom.FreeField) (@name=FreeField)
     Primary (@postcond=Primary.Ambiguous)                (@name=Ambiguous)
DotKeywordDimsOrCtorRef:
     "." "class"
     "." "super"
     "." "this"
     Dims
     "::" [TypeArguments] "new"
SimpleCallPrefix:
     MethodName "("
MethodInvocation:
     Primary (@postcond=Primary.MethodInvocation) (@name=ExplicitCallee)
     Primary (@postcond=Primary.ExpressionAtom.MethodInvocation) (@name=ImplicitCallee)
ClassInstanceCreationExpression:
     Primary (@postcond=Primary.ExpressionAtom.UnqualifiedClassInstanceCreationExpression) (@name=UnqualifiedClassInstanceCreationExpression)
     Primary (@postcond=Primary.InnerClassCreation) (@name=QualifiedClassInstanceCreationExpression)
UsePrefix:
     "."
     "["
     "::"
ClassLiteral: (@mixin=Typed)
     TypeName {Dim} "." "class"
     NumericType {Dim} "." "class"
     "boolean" {Dim} "." "class"
     "void" "." "class"
UnqualifiedClassInstanceCreationExpression: (@mixin=TypeDeclaration,MethodDescriptorReference)
     "new" [TypeArguments] ClassOrInterfaceTypeToInstantiate "(" [ArgumentList] ")" [ClassBody]   (@name=New)
ClassOrInterfaceTypeToInstantiate:
     // Lookahead avoids type arguments then diamond as in (new foo.Bar<T><>())
     // and filters out interstitial arguments as in (new foo.Outer<X>.Bar<Y>()).
     // TODO: MiscParserTestCase for these.
     !!ClassOrInterfaceTypeNoTypeArguments ClassOrInterfaceType [Diamond] (@name=ClassOrInterfaceTypeDiamond)
ClassOrInterfaceTypeNoTypeArguments:
     {Annotation} Identifier {"." {Annotation} Identifier} [TypeArgumentsOrDiamond] !"." !"<"
TypeArgumentsOrDiamond:
     TypeArguments
     Diamond
Diamond:
     "<" ">"
ArgumentList:
     Expression {"," Expression}
ArrayCreationExpression: (@mixin=Typed)
     "new" ArrayElementType Dims ArrayInitializer
     "new" ArrayElementType DimExprs [Dims] !"["
ArrayElementType:
     PrimitiveType
     ClassOrInterfaceType
DimExprs:
     DimExpr {DimExpr}
DimExpr:
     {Annotation} "[" Expression "]"
Expression: (@mixin=Typed) @nointerp
     Assignment
     LambdaExpression
     ConditionalExpression
LambdaExpression: @nointerp
     LambdaParameters "->" LambdaBody
LambdaParameters:
     Identifier
     "(" [FormalParameterList] ")"
     "(" InferredFormalParameterList ")"
InferredFormalParameterList:
     Identifier {"," Identifier}
LambdaBody:
     Expression
     Block
Assignment: (@mixin=Typed) @nointerp
     LeftHandSide AssignmentOperator Expression
AssignmentOperator: @operator
     "="
     "*="
     "/="
     "%="
     "+="
     "-="
     "<<="
     ">>="
     ">>>="
     "&="
     "^="
     "|="
ConditionalExpression: (@mixin=Typed) @nointerp
     ConditionalOrExpression "?" Expression ":" LambdaExpression
     ConditionalOrExpression "?" Expression ":" ConditionalExpression
     ConditionalOrExpression @anon
ConditionalOrExpression: (@mixin=Typed,BinaryOp) @nointerp
     ConditionalOrExpression "||" ConditionalAndExpression
     ConditionalAndExpression @anon
ConditionalAndExpression: (@mixin=Typed,BinaryOp) @nointerp
     ConditionalAndExpression "&&" InclusiveOrExpression
     InclusiveOrExpression @anon
InclusiveOrExpression: (@mixin=Typed,BinaryOp) @nointerp
     InclusiveOrExpression "|" ExclusiveOrExpression
     ExclusiveOrExpression @anon
ExclusiveOrExpression: (@mixin=Typed,BinaryOp) @nointerp
     ExclusiveOrExpression "^" AndExpression
     AndExpression @anon
AndExpression: (@mixin=Typed,BinaryOp) @nointerp
     AndExpression "&" EqualityExpression
     EqualityExpression @anon
EqualityExpression: (@mixin=Typed,BinaryOp) @nointerp
     EqualityExpression EqualityOperator RelationalExpression
     RelationalExpression @anon
// TODO: Attach metadata about whether primitive or reference comparison
// is done.
EqualityOperator: @operator @nointerp
     "=="
     "!="
RelationalExpression: (@mixin=Typed,BinaryOp) @nointerp
     RelationalExpression RelationalOperator ShiftExpression
     RelationalExpression "instanceof" ReferenceType
     ShiftExpression @anon
RelationalOperator: @operator @nointerp
     "<="
     ">="
     "<"
     ">"
ShiftExpression: (@mixin=Typed,BinaryOp) @nointerp
     ShiftExpression ShiftOperator AdditiveExpression
     AdditiveExpression @anon
ShiftOperator: @operator @nointerp
     "<<"
     ">>>"
     ">>"
AdditiveExpression: (@mixin=Typed,BinaryOp) @nointerp
     AdditiveExpression AdditiveOperator MultiplicativeExpression
     MultiplicativeExpression @anon
// TODO: Attach metadata about whether numeric addition or
// string concatenation is done.
AdditiveOperator: @operator @nointerp
     "+"
     "-"
MultiplicativeExpression: (@mixin=Typed,BinaryOp) @nointerp
     MultiplicativeExpression MultiplicativeOperator UnaryExpression
     UnaryExpression @anon
MultiplicativeOperator: @operator @nointerp
     "*"
     "/"
     "%"
UnaryExpression: (@mixin=Typed) @nointerp
     CastExpression
     PreExpression
     PostExpression
     PrefixOperator UnaryExpression
     Primary @anon
PrefixOperator: @operator @nointerp
     "+"
     "-"
     "~"
     "!"
IncrDecrOperator: @operator @nointerp
     "++"
     "--"
PreExpression: (@mixin=Typed) @nointerp
     IncrDecrOperator LeftHandSideExpression
PostExpression: (@mixin=Typed) @nointerp
     LeftHandSideExpression IncrDecrOperator
LeftHandSideExpression:
     LeftHandSide @anon
     "(" LeftHandSideExpression ")"
CastExpression: (@mixin=Typed) @nointerp
     ConfirmCast LambdaExpression (@name=Lambda)
     Cast        UnaryExpression  (@name=Expression)
Cast: @nointerp
     "(" ConfirmCast ")" !AmbiguousBinaryUnaryOperator @anon (@name=ConfirmCast)
     "(" ConvertCast ")" @anon (@name=ConvertCast)
ConfirmCast:
     ReferenceType {AdditionalBound}
ConvertCast:
     PrimitiveType
AmbiguousBinaryUnaryOperator: @operator
     "+"
     "-"
ConstantExpression:
     Expression


// Special handling for AST templates.
// This is not part of the Java grammar, but instead defines productions that are
// solely used when parsing AST templates.
(chapter=Template)
TemplateDirectives: @nonstandard @toplevel
    TemplateDirective {TemplateDirective}
TemplateDirective: @nonstandard @templateinstr
    "%%" "{" ["let" TemplateLocal {"," TemplateLocal} ";"]   (@name=BlockStart)    @templateStart
    "%%" "template" TemplateHeader "{" TemplateBody "}"      (@name=Function)
    "%%" "if" "(" Expression ")" "{"                         (@name=IfStart)       @templateStart
    "%%" "} else" ["if" "(" Expression ")"] "{"              (@name=Else)          @templateEnd @templateStart
    "%%" "for" "(" Identifier ":" Expression ")" "{"         (@name=LoopStart)     @templateStart
    "%%" "}"                                                 (@name=End)           @templateEnd
TemplateInterpolation: @nonstandard @toplevel @templateinstr
    "(%" TemplateComprehension [NodeTypeHint] ")"
    "{%" TemplateComprehension [NodeTypeHint] "}"
TemplateComprehension: @nonstandard
    Expression {"," Expression} [TemplateLoop] [TemplateCondition]
TemplateLoop: @nonstandard
    "for" "(" Identifier ":" Expression ")"
TemplateCondition: @nonstandard
    "if" "(" Expression ")"
TemplateLocal: @nonstandard
    !(Identifier Dims) VariableDeclarator
TemplateFormals: @nonstandard
    LocalName {"," LocalName}
TemplateHeader: @nonstandard
    Identifier "(" [TemplateFormals] ")" NodeTypeHint        (@name=Declaration)
TemplateBody: @nonstandard @nointerp
    any   // Faked based on the node type hint
NodeTypeHint: @nonstandard
// An @nointerp production can be interpolated into with an explicit type hint.
    ":" Identifier

// A parse tree has to have a single root.  When parsing a compilation unit that is
// within a block template, we start with a compilation unit, and after the
// generalize operation, end up with one or more block starts, followed by the
// compilation unit, followed by the same number of block ends.
//
// This pseudo-production allows collecting all of those into one pseudo-root.
TemplatePseudoRoot: @nonstandard @toplevel (@mixin=FileNode)
    CompilationUnit

QuotedName: @nonstandard
    "\\" ContextFreeNames
